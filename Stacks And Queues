#include <fstream>
#include <string>
#include <iostream>
using namespace std;

struct NODE {
	int value;
	NODE *next;
	NODE *prev;
	};
class List {
	protected:
		NODE *head;
		NODE *currPos;
		NODE *tail;
	public:
		int length;
		List() {
			head = 0;
			length = 0;
			currPos = 0;
			tail = 0;
			};
		void append(List *list, NODE *newNode) {
			if (list->head == 0) {		//list is empty
				list->head = newNode;
				list->tail = newNode;
				list->head->prev = 0;
				list->tail->next = 0;	
				}
			else {
				newNode->next = list->tail->next;
				list->tail->next = newNode;
				newNode->prev = list->tail;
				list->tail = newNode;
				}
			list->length++;
			};
		void prepend(List *list, NODE *newNode) {
			if (list->head == 0) { // List empty
				list->head = newNode;
				list->tail = newNode;
				list->head->prev = 0;
				list->tail->next = 0;
				}
			else {
				newNode->prev = list->head->prev;
				newNode->next = list->head;
				list->head->prev = newNode;
				list->head = newNode;
				}
			list->length++;
			};
		void insertAfter(List *list, NODE *currNode, NODE *newNode) {
			if (list->head == 0) { // List empty
				list->head = newNode;
				list->tail = newNode;
				}
			else if (currNode == list->tail) { // Insert after tail
				list->tail->next = newNode;
				newNode->prev = list->tail;
				list->tail = newNode;
				}
			else {
				NODE *sucNode = currNode->next;
				newNode->next = sucNode;
				newNode->prev = currNode;
				currNode->next = newNode;
				sucNode->prev = newNode;
				}
			};
		void remove(List *list, NODE *currPos) {
			currPos = head;
			NODE *sucNode = currPos->next;
			NODE *predNode = currPos->prev;
			if (sucNode != NULL) {
				sucNode->prev = predNode;
				}
			if (predNode != NULL) {
				predNode->next = sucNode;
				}
			if (currPos == list->head) { // Removed head
				list->head = sucNode;
				}
			if (currPos == list->tail) { // Removed tail
				list->tail = predNode;
				}
			list->length--;
			};
		void PeekNode(List *list) {
			// Output value at head
			cout << list->head->value << endl;
			};
		void printList(List *list) {
			list->currPos = list -> head; // Start at head
			cout << list->currPos->value << ", ";
			list->currPos = list->currPos->next;
			while (list->currPos->next != 0) {	//prints value
				cout << list->currPos->value << ", ";
				list->currPos = list->currPos->next;
				}
			cout << list->currPos->value;
			}
	};
class STACK : public List {
	public:
		//adds to beginning
		void Stack_Push(STACK *stack, NODE *newNode)
			{
				stack->prepend(stack, newNode);
			};
		//prints beginning
		void Stack_Pop(STACK *stack)
			{
				NODE *nothing2 = new NODE;
				cout << "Stack Pop value: ";
				stack->PeekNode(stack);
				stack->remove(stack, nothing2);
			};
		void Stack_Peek(STACK *stack)
			{
				cout << "Stack Peek value: ";
				stack->PeekNode(stack);
			};
		};
class QUEUE : public List {
	public:
		//adds to end
		void Queue_Push(QUEUE *queue, NODE *newNode)
			{
				queue->append(queue, newNode);
			}
		//prints beginning
		void Queue_Pop(QUEUE *queue)
			{
				NODE *nothing1 = new NODE;
				cout << "Queue Pop value: ";
				queue->PeekNode(queue);
				queue->remove(queue, nothing1);
			};
		void Queue_Peek(QUEUE *queue)
			{
				cout << "Queue Peek value: ";
				queue->PeekNode(queue);
			};
	};
int main() {
	int temp;
	string direction;
	string A = "Push";
	string B = "Pop";
	string C = "Peek";
	string D = "Quit";
	STACK *stack1 = new STACK;
	QUEUE *queue1 = new QUEUE; 
	int A1, B1, C1, D1, E1;	//array to hold initial 5 values of stack/queue
	cout << "Please enter 5 numbers: ";
	cin >> A1 >>B1>>C1>>D1>>E1;
		
	NODE *stack_node1 = new NODE;	//creates new node to add to stack
		stack_node1->value = A1;		//assigns user values to nodes
		//cout << "A1: " << stack_node1->value << endl;
	NODE *stack_node2 = new NODE;
		stack_node2->value = B1;
		//cout << "B1: " << stack_node2->value << endl;
	NODE *stack_node3 = new NODE;
		stack_node3->value = C1;
		//cout << "C1: " << stack_node3->value << endl;
	NODE *stack_node4 = new NODE;
		stack_node4->value = D1;
		//cout << "D1: " << stack_node4->value << endl;
	NODE *stack_node5 = new NODE;
		stack_node5->value = E1;
		//cout << "E1: " << stack_node5->value << endl<<endl<<endl;

	NODE *queue_node1 = new NODE;	//creates new node to add to queue
		queue_node1->value = A1;	//assigns user values to nodes
		//cout << "A1: " << queue_node1->value << endl;
	NODE *queue_node2 = new NODE;
		queue_node2->value = B1;
		//cout << "B1: " << queue_node2->value << endl;
	NODE *queue_node3 = new NODE;
		queue_node3->value = C1;
		//cout << "C1: " << queue_node3->value << endl;
	NODE *queue_node4 = new NODE;
		queue_node4->value = D1;
		//cout << "D1: " << queue_node4->value << endl;
	NODE *queue_node5 = new NODE;
		queue_node5->value = E1;
		//cout << "E1: " << queue_node5->value << endl<<endl<<endl;

	stack1->Stack_Push(stack1, stack_node1); //pushes user values to stack
	stack1->Stack_Push(stack1, stack_node2);
	stack1->Stack_Push(stack1, stack_node3);
	stack1->Stack_Push(stack1, stack_node4);
	stack1->Stack_Push(stack1, stack_node5);

	//cout << "On the stack: " << stack_node1->value << ", " << stack_node2->value << ", " << stack_node3->value << ", " << stack_node4->value << ", " << stack_node5->value << ", " << endl;
	cout << "Stack: ";
	stack1->printList(stack1);
	cout <<endl;
	
	queue1->Queue_Push(queue1, queue_node1);	//pushes user values to queue
	queue1->Queue_Push(queue1, queue_node2);
	queue1->Queue_Push(queue1, queue_node3);
	queue1->Queue_Push(queue1, queue_node4);
	queue1->Queue_Push(queue1, queue_node5);

	//cout << "On the queue: " << queue_node1->value << ", " << queue_node2->value << ", " << queue_node3->value << ", " << queue_node4->value << ", " << queue_node5->value << ", " << endl;
	cout << "Queue: ";
	queue1->printList(queue1);
	cout << endl << endl;
		
	//Recieves instructions
	int Skeleton_Key = 595;
	while (Skeleton_Key != 0) {
		cout << "What would you like to do? (Push, Pop, Peek, Quit)		...		";
		cin >> direction;
		cout << endl;
		if (direction == A)	//Push
			{
				int push_value;
				cout << "Please enter a number to push: ";
				cin >> push_value;
				NODE *push_node = new NODE;		//create node to add to stack/queue
				push_node->value = push_value;	//assigns user value to node
				stack1->Stack_Push(stack1, push_node);	//pushes onto top of stack
				cout << endl<<endl<< "Stack of " << stack1->length << " elements: [";
				stack1->printList(stack1);
				cout << "]";

				queue1->Queue_Push(queue1, push_node);	//pushes onto end of queue
				cout << endl;
				cout << "Queue of " << queue1->length << " elements: [";
				queue1->printList(queue1);
				cout << "]" << endl << endl;		
			}
		else if (direction == B) //Pop
			{
				stack1->Stack_Pop(stack1);	//prints top of stack
				queue1->Queue_Pop(queue1);	//prints beginning of queue
				cout << endl << endl;
			}
		else if (direction == C) //Peek
			{
				stack1->Stack_Peek(stack1);
				queue1->Queue_Peek(queue1);
				cout << endl << endl;
			}
		else if (direction == D) //Quit
			{
				cout << "Stack of " << stack1->length << " elements: [";
				stack1->printList(stack1);
				cout << "]" << endl;

				cout << "Queue of " << queue1->length << " elements: [";
				queue1->printList(queue1);
				cout << "]" << endl;
				Skeleton_Key = 0;
			}
		else {
			cout << "invalid Entry! Please try again..." << endl << endl;
			}
		}
	return 0;
}
